<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>HeyGen Interactive Avatar Demo</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f5f5f5;
      text-align: center;
      padding: 20px;
    }
    #avatarContainer {
      margin: 20px auto;
      width: 640px;
      height: 480px;
      background-color: #000;
      position: relative;
      border: 2px solid #ccc;
    }
    #videoElement {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .control-button {
      margin: 10px;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>HeyGen Interactive Avatar Demo</h1>
  <div id="avatarContainer">
    <!-- Video element where the avatar stream will be rendered -->
    <video id="videoElement" autoplay playsinline muted></video>
  </div>
  <div>
    <button id="startBtn" class="control-button">Start Streaming</button>
    <button id="stopBtn" class="control-button">Stop Streaming</button>
  </div>

  <!-- LiveKit client SDK script (required for streaming integration) -->
  <script src="https://cdn.livekit.io/sdk/livekit-client.js"></script>
  <!-- HeyGen Streaming API script (assumed provided by HeyGen) -->
  <script src="https://cdn.heygen.com/sdk/heygen-streaming.js"></script>
  <script>
    // This example demonstrates a production integration of HeyGen's Streaming API with LiveKit v2.
    // Replace placeholder values with your actual LiveKit server URL, token, and HeyGen configuration.

    let room;
    let localParticipant;
    const videoElement = document.getElementById('videoElement');
    const startBtn = document.getElementById('startBtn');
    const stopBtn = document.getElementById('stopBtn');

    // Function to start the HeyGen streaming session.
    async function startStreaming() {
      try {
        // Replace these with your actual LiveKit server details from your HeyGen integration.
        const liveKitUrl = 'wss://your-livekit-server-url';
        const token = 'OWUxODE2ZTUxZGIxNDZjMWFkYjY3ODY4ZDViZDAzNjctMTc0MTY5OTMwOA==';

        // Connect to the LiveKit room.
        room = await LiveKit.connect(liveKitUrl, token);
        localParticipant = room.localParticipant;

        // Use HeyGen's Streaming API to obtain the interactive avatar stream.
        // This call should return a MediaStream from the HeyGen API.
        const heygenStream = await HeyGenStreamingAPI.getAvatarStream({
          avatarId: '2fe7e0bc976c4ea1adaff91afb0c68ec',  // Replace with your actual avatar identifier.
          language: 'en',              // Optional: language or other configuration parameters.
          // Additional configuration options can be added here as needed.
        });

        // Create a new LocalVideoTrack using the HeyGen stream's video track.
        const videoTrack = new LiveKit.LocalVideoTrack(heygenStream.getVideoTracks()[0]);

        // Publish the video track to the LiveKit room.
        await localParticipant.publishTrack(videoTrack);

        // Set the HeyGen stream to the video element for live preview.
        videoElement.srcObject = heygenStream;

        console.log('HeyGen avatar streaming started.');
      } catch (error) {
        console.error('Error starting HeyGen streaming:', error);
      }
    }

    // Function to stop the streaming session.
    async function stopStreaming() {
      try {
        if (localParticipant) {
          localParticipant.tracks.forEach(publication => {
            publication.track.stop();
            localParticipant.unpublishTrack(publication.track);
          });
        }
        if (room) {
          await room.disconnect();
        }
        videoElement.srcObject = null;
        console.log('Streaming stopped.');
      } catch (error) {
        console.error('Error stopping streaming:', error);
      }
    }

    startBtn.addEventListener('click', startStreaming);
    stopBtn.addEventListener('click', stopStreaming);
  </script>
</body>
</html>

